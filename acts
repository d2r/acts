#!/bin/sh

# Exit if an uninitialised variable is read
set -u
# Exit if a pipeline exits non-zero
set -e

VERSION="1.2"

if [ "$1" = "--version" ]; then
    echo "acts version $VERSION"
    exit 0
fi

starttime=$(date +%s)

# set these so we can define the log_functions early
verbose=0
syslog=
log_message() {
    if [ "$verbose" -ge 0 ] ; then
        echo "$@" >&2
        if [ -n "$syslog" ] ; then
            logger -t "acts[$$]" -p "$syslog.warn" "$@"
        fi
    fi
}
log_verbose() {
    if [ "$verbose" -ge 1 ] ; then
        echo "$@" >&2
        if [ -n "$syslog" ] ; then
            logger -t "acts[$$]" -p "$syslog.info" "$@"
        fi
    fi
}
log_debug()   {
    if [ "$verbose" -ge 2 ] ; then
        echo "$@" >&2
        if [ -n "$syslog" ] ; then
            logger -t "acts[$$]" -p "$syslog.debug" "$@"
        fi
    fi
}

# PART 1: Initialisation
if [ -f acts.conf ] ; then
    . ./acts.conf
    # Loading from CWD is for development/debugging, so be noisy when we do
    log_message "Loaded $(pwd)/acts.conf"
elif [ -f /etc/acts.conf ] ; then
    . /etc/acts.conf
    log_debug "Loaded /etc/acts.conf"
elif [ -f /usr/local/etc/acts.conf ] ; then
    . /usr/local/etc/acts.conf
    log_debug "Loaded /usr/local/etc/acts.conf"
else
    log_message "No $(pwd)/acts.conf, /etc/acts.conf or /usr/local/etc/acts.conf! Exiting."
    exit 1
fi
# Use default values if anything is not set
verbose="${verbose=0}"
hostname="${hostname=$(hostname -s)}"
backuptargets="${backuptargets=}"
prebackupscript="${prebackupscript=}"
postbackupscript="${postbackupscript=}"
tarsnap="${tarsnap:=tarsnap}"
tarsnapbackupoptions="${tarsnapbackupoptions=}"
lockfile="${lockfile=/var/run/acts}"
LANG="${LANG=en_US.UTF-8}" ; export LANG

# Parameter validation
if [ -z "$backuptargets" ] ; then
    log_message "\$backuptargets is not set in acts.conf, exiting."
    exit 1
fi

# Create the lock. mkdir is atomic test/set, so use that instead of the typical test -f/touch combo
if [ -d "$lockfile" ] ; then
    log_message "$lockfile exists referencing PID $(cat "$lockfile/pid" 2>/dev/null || echo "<none>")."
    log_message "Hint: If acts is not already running, rm -rf $lockfile"
    exit 1
else
    if output=$(mkdir "$lockfile" 2>&1) ; then
        echo $$ > "$lockfile/pid"
        log_debug "Created $lockfile/ with 'pid' referencing $$"
    else
        log_message "Can't create lock $lockfile: $output"
        exit 1
    fi
fi

trap 'trap - INT TERM EXIT ; echo Exiting unexpectedly. >&2 ; rm -f "$lockfile/pid"; rmdir "$lockfile" ; exit 1' INT TERM EXIT

# PART 2: Preparation
log_debug "Listing tarsnap archives"
if ! archives_unsorted=$($tarsnap --list-archives) ; then
    log_message "Couldn't get list of existing archives, exiting."
    log_message "Hint: is Tarsnap configured correctly?"
    exit 1
fi
archives=$(echo "$archives_unsorted" | sort -n)

# When is now?
today=$(date -u "+%Y-%m-%d_%H:%M:%S")
# Instead of re-running date, be paranoid the day was microseconds away from ending
year=$(echo "$today" | cut -d_ -f1 | cut -d- -f1)
month=$(echo "$today" | cut -d_ -f1 | cut -d- -f2)
# day=$(echo "$today" | cut -d_ -f1 | cut -d- -f3) # unused
log_debug "It's $today"

# Determine the archive type to create
if echo "$archives" | egrep -q "^$hostname-yearly-$year" ; then
    if echo "$archives" | egrep -q "^$hostname-monthly-$year-$month" ; then
        # There's a yearly and monthly backup already
        archivetype="daily"
    else
        # There was a yearly but no monthly backup
        archivetype="monthly"
    fi
else
    # There's no yearly backup
    archivetype="yearly"
fi
log_verbose "Creating $archivetype backup"


# Run the pre-backup script
if [ -n "$prebackupscript" ] ; then
    if [ -x "$prebackupscript" ] ; then
        log_verbose "Running $prebackupscript..."
        $prebackupscript
    else
        log_message "prebackupscript ($prebackupscript) is not executable!"
    fi
fi

# PART 3: Backup
backuprc=0 # Notice any failed backups
for dir in $backuptargets ; do
    log_verbose "Backing up /$dir..."
    archive_starttime=$(date +%s)
    nicedirname=$(echo "$dir" | tr -d '/')
    # Uncontrolled expansion is bad, but we have little choice. See https://github.com/koalaman/shellcheck/wiki/Sc2086
    # shellcheck disable=SC2086
    if ! output="$($tarsnap -c -f "$hostname-$archivetype-$today-$nicedirname" -C / $tarsnapbackupoptions "$dir" 2>&1)" ; then
        log_message "Failed to back up \"$dir\"! ($output)"
        backuprc=1
    fi
    archive_endtime=$(date +%s)
    log_verbose "Backup of $dir took $((archive_endtime - archive_starttime)) seconds"
done
# Update the archive listing
archives=$($tarsnap --list-archives | sort -n)


# PART 4: Trim old backups.

if [ "$backuprc" != "0" ] ; then
    log_message "One of the backups failed -- not deleting old backups"
    exit 1
fi

# We don't delete any yearly backups

# We keep 12 monthly backups
monthlybackups=$(echo "$archives" | grep "$hostname-monthly-" | cut -d_ -f1 | uniq | sort -rn)
if [ -n "$monthlybackups" ]; then
    monthlybackupscount="$(echo "$monthlybackups" | wc -l)"
    if [ "$monthlybackupscount" -gt 12 ] ; then
        log_debug "More than 12 monthly backups, deleting the oldest"
        echo "$monthlybackups" | tail -n +13 | while read -r archiveprefixtodel ; do
            log_verbose "Deleting backups $archiveprefixtodel*"
            echo "$archives" | egrep "^$archiveprefixtodel" | while read -r archivetodel ; do
                log_debug "  - Deleting $archivetodel"
                $tarsnap -d -f "$archivetodel"
            done
        done
    else
        log_debug "Found $monthlybackupscount monthly backups, not deleting"
    fi
fi

# We keep 31 daily backups
dailybackups=$(echo "$archives" | grep "$hostname-daily-" | cut -d_ -f1 | uniq | sort -rn)
if [ -n "$dailybackups" ]; then
    dailybackupscount="$(echo "$dailybackups" | wc -l)"
    if [ "$dailybackupscount" -gt 31 ] ; then
        log_debug "More than 30 daily backups, deleting the oldest"
        echo "$dailybackups" | tail -n +32 | while read -r archiveprefixtodel ; do
            log_verbose "Deleting backups $archiveprefixtodel*"
            echo "$archives" | egrep "^$archiveprefixtodel" | while read -r archivetodel ; do
                log_debug "  - Deleting $archivetodel"
                $tarsnap -d -f "$archivetodel"
            done
        done
    else
        log_debug "Found $dailybackupscount daily backups, not deleting"
    fi
fi

# Run the post-backup script
if [ -n "$postbackupscript" ] ; then
    if [ -x "$postbackupscript" ] ; then
        log_verbose "Running $postbackupscript..."
        $postbackupscript
    else
        log_message "postbackupscript ($postbackupscript) is not executable!"
    fi
fi

trap - INT TERM EXIT
rm -f "$lockfile/pid"; rmdir "$lockfile"

endtime=$(date +%s)
log_verbose "acts run took $((endtime - starttime)) seconds"
exit 0
